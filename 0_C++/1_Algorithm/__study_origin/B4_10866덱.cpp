/*https://www.acmicpc.net/problem/10866
* 문제
정수를 저장하는 덱(Deque)를 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.

명령은 총 여덟 가지이다.

push_front X: 정수 X를 덱의 앞에 넣는다.
push_back X: 정수 X를 덱의 뒤에 넣는다.
pop_front: 덱의 가장 앞에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
pop_back: 덱의 가장 뒤에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 덱에 들어있는 정수의 개수를 출력한다.
empty: 덱이 비어있으면 1을, 아니면 0을 출력한다.
front: 덱의 가장 앞에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
back: 덱의 가장 뒤에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
입력
첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.

출력
출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.
*/
#include <iostream>
#include <string>

using namespace std;

int main()
{
	int N, p, front_index = 0, end_index = 0;
	string cmd;

	cin >> N;
	int* M = new int[N] {};
	while (N--)
	{
		cin >> cmd;
		//push_front X : 정수 X를 덱의 앞에 넣는다.
		if (cmd == "push_front")
		{
			cin >> p;
			if (front_index != end_index) 
			{
				for (int i = end_index; i >= front_index; i--)
					M[i] = M[i - 1];
				M[front_index] = p;
				end_index++;
			}
			else
			{
				M[front_index] = p;
				end_index++;
			}
		}
		//push_back X : 정수 X를 덱의 뒤에 넣는다.
		else if (cmd == "push_back")
		{
			cin >> p;
			end_index++;
			M[end_index - 1] = p;
		}
		//pop_front : 덱의 가장 앞에 있는 수를 빼고, 그 수를 출력한다.만약, 덱에 들어있는 정수가 없는 경우에는 - 1을 출력한다.
		else if (cmd == "pop_front")
		{
			if (front_index == end_index)
				cout << "-1" << endl;
			else
			{
				cout << M[front_index] << endl;
				M[front_index] = NULL;
				front_index++;
			}
		}
		//pop_back : 덱의 가장 뒤에 있는 수를 빼고, 그 수를 출력한다.만약, 덱에 들어있는 정수가 없는 경우에는 - 1을 출력한다.
		else if (cmd == "pop_back")
		{
			if (front_index == end_index)
				cout << "-1" << endl;
			else
			{
				cout << M[end_index - 1] << endl;
				end_index--;
			}
		}
		//size : 덱에 들어있는 정수의 개수를 출력한다.
		else if (cmd == "size")
			cout << end_index - front_index << endl;
		//empty : 덱이 비어있으면 1을, 아니면 0을 출력한다.
		else if (cmd == "empty")
		{
			if (end_index - front_index)
				cout << "0" << endl;
			else
				cout << "1" << endl;
		}
		//front : 덱의 가장 앞에 있는 정수를 출력한다.만약 덱에 들어있는 정수가 없는 경우에는 - 1을 출력한다.
		else if (cmd == "front")
		{
			if (front_index == end_index)
				cout << "-1" << endl;
			else
				cout << M[front_index] << endl;
		}
		//back : 덱의 가장 뒤에 있는 정수를 출력한다.만약 덱에 들어있는 정수가 없는 경우에는 - 1을 출력한다.
		else if (cmd == "back")
		{
			if (front_index == end_index)
				cout << "-1" << endl;
			else
				cout << M[end_index-1] << endl;
		}
	}
	delete[] M;
	return 0;
}